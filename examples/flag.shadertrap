# Copyright 2020 The ShaderTrap Project Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

CREATE_EMPTY_TEXTURE_2D my_tex WIDTH 256 HEIGHT 256

DECLARE_SHADER frag FRAGMENT
#version 320 es

precision highp float;

layout(location = 0) uniform float aninput;

layout(binding = 0) uniform buf1 {
  float one;
  float zero;
};

layout(binding = 1) uniform buf2 {
  uint uone;
  uint uzero;
  uint uthree;
  uint ufour;
};

layout(location = 0) out vec4 color;

void main() {
  if (uthree + ufour != 7u) {
    discard;
  }
  if (gl_FragCoord.x < 128.0) {
    if (gl_FragCoord.y < 128.0) {
      color = vec4(one, aninput, float(uzero), float(uone));
    } else {
      color = vec4(one - float(uone), one, zero, one);
    }
  } else {
    if (gl_FragCoord.y < 128.0) {
      color = vec4(zero, 0.0, 1.0, one);
    } else {
      color = vec4(float(ufour - uthree), float(uone), 0.0, 1.0);
    }
  }
}
END

DECLARE_SHADER vert VERTEX
#version 320 es
layout(location = 0) in vec2 _GLF_vertexPosition;
void main(void) {
    gl_Position = vec4(_GLF_vertexPosition, 0.0, 1.0);
}
END

COMPILE_SHADER frag_compiled SHADER frag

COMPILE_SHADER vert_compiled SHADER vert

CREATE_PROGRAM program SHADERS vert_compiled frag_compiled

CREATE_BUFFER quad_vertex_buffer SIZE_BYTES 48 INIT_TYPE float INIT_VALUES
                           -1.0 -1.0
                            -1.0 1.0
                            1.0 -1.0
                            1.0 1.0
                            -1.0 1.0
                            1.0 -1.0

CREATE_BUFFER quad_index_buffer SIZE_BYTES 24 INIT_TYPE uint INIT_VALUES
                           0 1 2 3 4 5

CREATE_BUFFER ubo0 SIZE_BYTES 8 INIT_TYPE float INIT_VALUES 1.0 0.0

CREATE_BUFFER ubo1 SIZE_BYTES 16 INIT_TYPE uint INIT_VALUES 1 0 3 4

CREATE_RENDERBUFFER renderbuffer WIDTH 256 HEIGHT 256

BIND_UNIFORM_BUFFER BUFFER ubo0 BINDING 0

BIND_UNIFORM_BUFFER BUFFER ubo1 BINDING 1

SET_UNIFORM PROGRAM program LOCATION 0 TYPE float VALUES 0.0

RUN_GRAPHICS
  PROGRAM program
  VERTEX_DATA
    [ 0 -> BUFFER quad_vertex_buffer OFFSET_BYTES 0 STRIDE_BYTES 8 DIMENSION 2 ]
  INDEX_DATA quad_index_buffer
  VERTEX_COUNT 6
  TOPOLOGY TRIANGLES
  FRAMEBUFFER_ATTACHMENTS
    [ 0 -> renderbuffer ]

CREATE_RENDERBUFFER renderbuffer2 WIDTH 256 HEIGHT 256

RUN_GRAPHICS
  PROGRAM program
  VERTEX_DATA
    [ 0 -> BUFFER quad_vertex_buffer OFFSET_BYTES 0 STRIDE_BYTES 8 DIMENSION 2 ]
  INDEX_DATA quad_index_buffer
  VERTEX_COUNT 6
  TOPOLOGY TRIANGLES
  FRAMEBUFFER_ATTACHMENTS
    [ 0 -> renderbuffer2 ]

DUMP_RENDERBUFFER RENDERBUFFER renderbuffer FILE "example_flag.png"

ASSERT_PIXELS EXPECTED 0 0 255 255 RENDERBUFFER renderbuffer RECTANGLE 129 129 5 5

ASSERT_EQUAL BUFFER1 renderbuffer BUFFER2 renderbuffer2

ASSERT_SIMILAR_EMD_HISTOGRAM RENDERBUFFERS renderbuffer renderbuffer2 TOLERANCE 0.005
