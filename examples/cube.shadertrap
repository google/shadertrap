# Copyright 2020 The ShaderTrap Project Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

CREATE_EMPTY_TEXTURE_2D my_tex WIDTH 256 HEIGHT 256

SET_TEXTURE_PARAMETER TEXTURE my_tex PARAMETER TEXTURE_MAG_FILTER VALUE NEAREST
SET_TEXTURE_PARAMETER TEXTURE my_tex PARAMETER TEXTURE_MIN_FILTER VALUE NEAREST

DECLARE_SHADER texgen_frag FRAGMENT
#version 320 es
precision highp float;

layout(location = 0) out vec4 _GLF_color;

void main()
{
 _GLF_color = vec4(gl_FragCoord.x * (1.0 / 256.0),
                   float((int(gl_FragCoord.x) ^ int(gl_FragCoord.y))) * (1.0 / 256.0),
                   gl_FragCoord.y * (1.0 / 256.0),
                   1.0);
}
END

DECLARE_SHADER texgen_vert VERTEX
#version 320 es
layout(location = 0) in vec2 _GLF_vertexPosition;
void main(void) {
    gl_Position = vec4(_GLF_vertexPosition, 0.0, 1.0);
}
END

DECLARE_SHADER cube_frag FRAGMENT
#version 320 es

precision highp float;

layout(location = 1) uniform sampler2D a_texture;

layout(location = 0) in vec2 v_texCoord;

layout(location = 0) out vec4 _GLF_color;

void main() {
     _GLF_color = texture(a_texture, v_texCoord);
}
END

DECLARE_SHADER cube_vert VERTEX
#version 320 es

layout(location = 0) in vec3 a_position;
layout(location = 1) in vec2 a_texCoord0;

layout (location = 0) out vec2 v_texCoord;

void main(void) {

    float thetaX = 10.5;
    float thetaY = 1.1;
    float thetaZ = 0.3;

    mat3 rotateX;
    rotateX[0] = vec3(1.0, 0.0, 0.0);
    rotateX[1] = vec3(0.0, cos(thetaX), sin(thetaX));
    rotateX[2] = vec3(0.0, -sin(thetaX), cos(thetaX));

    mat3 rotateY;
    rotateY[0] = vec3(cos(thetaY), 0.0, -sin(thetaY));
    rotateY[1] = vec3(0.0, 1.0, 0.0);
    rotateY[2] = vec3(sin(thetaY), 0.0, cos(thetaY));

    mat3 rotateZ;
    rotateZ[0] = vec3(cos(thetaZ), sin(thetaZ), 0);
    rotateZ[1] = vec3(-sin(thetaZ), cos(thetaZ), 0.0);
    rotateZ[2] = vec3(0.0, 0.0, 1.0);

    gl_Position = vec4(0.5 * rotateZ * rotateY * rotateX * a_position, 1.0);
    v_texCoord = a_texCoord0;
}
END

COMPILE_SHADER texgen_frag_compiled SHADER texgen_frag

COMPILE_SHADER texgen_vert_compiled SHADER texgen_vert

COMPILE_SHADER cube_frag_compiled SHADER cube_frag

COMPILE_SHADER cube_vert_compiled SHADER cube_vert

CREATE_PROGRAM texgen_program SHADERS texgen_vert_compiled texgen_frag_compiled

CREATE_PROGRAM cube_program SHADERS cube_vert_compiled cube_frag_compiled

CREATE_BUFFER quad_vertex_buffer SIZE_BYTES 48 INIT_VALUES FLOAT
                           -1.0 -1.0
                            -1.0 1.0
                            1.0 -1.0
                            1.0 1.0
                            -1.0 1.0
                            1.0 -1.0

CREATE_BUFFER quad_index_buffer SIZE_BYTES 24 INIT_VALUES UINT
                           0 1 2 3 4 5

CREATE_BUFFER cube_vertex_buffer SIZE_BYTES 432 INIT_VALUES FLOAT

  -1.0 -1.0 -1.0
  -1.0 1.0 -1.0
  -1.0 1.0 1.0

  -1.0 -1.0 -1.0
  -1.0 -1.0 1.0
  -1.0 1.0 1.0

  -1.0 -1.0 -1.0
  -1.0 1.0 -1.0
  1.0 1.0 -1.0

  -1.0 -1.0 -1.0
  1.0 -1.0 -1.0
  1.0 1.0 -1.0

  -1.0 -1.0 -1.0
  -1.0 -1.0 1.0
  1.0 -1.0 1.0

  -1.0 -1.0 -1.0
  1.0 -1.0 -1.0
  1.0 -1.0 1.0

  1.0 1.0 1.0
  1.0 -1.0 1.0
  -1.0 -1.0 1.0

  1.0 1.0 1.0
  -1.0 1.0 1.0
  -1.0 -1.0 1.0

  1.0 1.0 1.0
  1.0 -1.0 1.0
  1.0 -1.0 -1.0

  1.0 1.0 1.0
  1.0 1.0 -1.0
  1.0 -1.0 -1.0

  1.0 1.0 1.0
  -1.0 1.0 1.0
  -1.0 1.0 -1.0

  1.0 1.0 1.0
  1.0 1.0 -1.0
  -1.0 1.0 -1.0

CREATE_BUFFER cube_texcoord_buffer SIZE_BYTES 288 INIT_VALUES FLOAT
    0.0 0.0
    1.0 0.0
    1.0 1.0

    0.0 0.0
    0.0 1.0
    1.0 1.0

    0.0 0.0
    1.0 0.0
    1.0 1.0

    0.0 0.0
    0.0 1.0
    1.0 1.0

    0.0 0.0
    1.0 0.0
    1.0 1.0

    0.0 0.0
    0.0 1.0
    1.0 1.0

    0.0 0.0
    1.0 0.0
    1.0 1.0

    0.0 0.0
    0.0 1.0
    1.0 1.0

    0.0 0.0
    1.0 0.0
    1.0 1.0

    0.0 0.0
    0.0 1.0
    1.0 1.0

    0.0 0.0
    1.0 0.0
    1.0 1.0

    0.0 0.0
    0.0 1.0
    1.0 1.0

CREATE_BUFFER cube_index_buffer SIZE_BYTES 144 INIT_VALUES UINT
                           0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35

RUN_GRAPHICS
  PROGRAM texgen_program
  VERTEX_DATA
    [ 0 -> BUFFER quad_vertex_buffer OFFSET_BYTES 0 STRIDE_BYTES 8 DIMENSION 2 ]
  INDEX_DATA quad_index_buffer
  VERTEX_COUNT 6
  TOPOLOGY TRIANGLES
  FRAMEBUFFER_ATTACHMENTS
    [ 0 -> my_tex ]

CREATE_RENDERBUFFER renderbuffer WIDTH 256 HEIGHT 256

BIND_TEXTURE TEXTURE my_tex TEXTURE_UNIT 1

RUN_GRAPHICS
  PROGRAM cube_program
  VERTEX_DATA
    [ 0 -> BUFFER cube_vertex_buffer OFFSET_BYTES 0 STRIDE_BYTES 12 DIMENSION 3,
      1 -> BUFFER cube_texcoord_buffer OFFSET_BYTES 0 STRIDE_BYTES 8 DIMENSION 2 ]
  INDEX_DATA cube_index_buffer
  VERTEX_COUNT 36
  TOPOLOGY TRIANGLES
  FRAMEBUFFER_ATTACHMENTS
    [ 0 -> renderbuffer ]

DUMP_RENDERBUFFER RENDERBUFFER renderbuffer FILE "example_cube.png"
