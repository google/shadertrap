# Copyright 2021 Shiyu Liu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

GL 4.5

CREATE_BUFFER input_array SIZE_BYTES 1024 INIT_VALUES uint

CREATE_BUFFER input_array_expected SIZE_BYTES 1024 INIT_VALUES uint
CREATE_BUFFER result SIZE_BYTES 4 INIT_VALUES uint 0
CREATE_BUFFER expected SIZE_BYTES 4 INIT_VALUES uint 1

BIND_SHADER_STORAGE_BUFFER BUFFER input_array BINDING 0
BIND_SHADER_STORAGE_BUFFER BUFFER result BINDING 1

DECLARE_SHADER shader KIND COMPUTE
#version 450

layout(local_size_x=256, local_size_y=1, local_size_z=1) in;

layout(std430, binding = 0) buffer input_array {
  uint[256] data;
}; 
layout(std430, binding = 1) buffer result {
  uint res;
};

void main() {
  // id range: [0, 255].
  uint id = uint(gl_LocalInvocationID.x);
  // depth of the tree where we perform reduction. 
  uint Depth = findMSB(data.length());
  
  // At each step, half of invocations drop out of the computation. 
  // Index corresponding to active invocations will update with min value while
  // the rest will set to corresponding id in case race condition between multiple threads occurs.
  // This way each position in the input array other than index 0 should be set to its index value
  // by the corresponding invocation.  
  // Each active invocation will add its value to that of a neighboring invocatiion. 
  for(uint i = 1; i <= Depth; ++i) {
  	if(id % (1 << i) == 0) {
  		data[id] = min(data[id], data[id + (1<<(i-1))]);
  		data[id + (1<<(i-1))] = id + (1<<(i-1)) ; 
  	}
  	barrier(); 
  }
  // Eventually the first value contains the sum of all values in the array.
  if(gl_LocalInvocationID.x == 0) res = data[0];
}
END

COMPILE_SHADER shader_compiled SHADER shader
CREATE_PROGRAM compute_prog SHADERS shader_compiled

RUN_COMPUTE
    PROGRAM compute_prog
    NUM_GROUPS 1 1 1

ASSERT_EQUAL BUFFERS expected result
ASSERT_EQUAL BUFFERS input_array_expected input_array
